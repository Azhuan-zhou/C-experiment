#include <iostream>
using namespace std;
const int MAX_V = 23;
void print(int path[], int V)
{
    cout << "存在哈密顿回路" << endl;
    for (int i = 0; i < V; i++) cout << path[i] << " ";
    cout << path[0] << endl;
}
//path记录路径，visited记录顶点是否访问过，len记录当前路径的长度
bool hamCycle(int graph[][MAX_V], int V, int path[], bool visited[], int current) {
    if (current == V) { //访问到最后一个顶点
        if (graph[path[current - 1]][0] == 1)  return true;//有到0点的边
        else return false;
    }
    //遍历起点外其它顶点
    for (int v = 1; v < V; v++) {
        //如果没访问过，并且有边相连
        if (!visited[v] && graph[path[current - 1]][v] == 1) {
            visited[v] = true;
            path[current] = v;
            //当本次递归的child也为true时返回true
            if (hamCycle(graph, V, path, visited, current + 1)) return true;
            //当本条递归线路失败时恢复原图
            path[current] = -1;
            visited[v] = false;
        }
    }
    return false;
}
//从起点开始引导
bool hamCycleStart(int graph[][MAX_V], int V) {
    int path[MAX_V];
    memset(path, -1, sizeof(path));
    bool visited[MAX_V] = { 0 };
    path[0] = 0;
    visited[V] = true; //把起点标记为访问过
    //起点已确定，current从1开始
    if (hamCycle(graph, V, path, visited, 1) == false) {
        cout << "哈密顿回路不存在" << endl;
        return false;
    }
    print(path, V);
    return true;
}
int main() {
    int V = 23;
    int graph[MAX_V][MAX_V] = { {0,545,878,5454,545,8787,54654,56654,60,564,654,687,3554,987,4654,897,654,987,654,987,654,987,654},
         {654,0,654,987,65654,4984,984,984,654,987,546,987,654,987,654,987,987,654,987,80,9865,654,654},
        {2858,984,0,894,654,987,546,987,651,987,984,468,687,686,984,70,654,987,654,654,945,654,654},
        {654,98654,65654,0,6877,984,766,988,987,684,687,984,687,984,687,500,684,984,68,684,687,987,654},
        {546,987,20,987,0,987,654,1321,984,687,687,687,687,687,654,654,687,987,654,987,354,687,354 },
        {654, 321, 987, 654, 345, 0, 987, 90, 258, 147, 369, 519, 684, 519, 951, 687, 951, 897, 654, 456, 654, 327, 654},
        {987,654,987,951,678,984,0,987,987,456,785,789,799,456,878,549,987,158,786,458,50,4758,798},
        {545,87,5454,545,8787,54654,56654,0,600,564,654,687,3554,987,64654,897,654,987,654,987,654,987,654},
        {654,654,987,65,4984,984,984,654,0,987,546,987,654,987,654,987,987,654,987,80,9865,654,654},
        {2858,984,894,654,987,546,987,651,987,0,984,468,687,686,984,700,654,77,654,654,945,654,654 },
        {654, 98654, 65654, 6877, 984, 766, 988, 987, 684, 687, 0, 84, 687, 984, 687, 500, 684, 984, 687, 684, 687, 987, 654},
        {546,987,200,987,987,654,1321,984,687,687,687,0,687,67,654,654,687,987,654,987,354,687,354},
    {654,321,987,654,345,987,905,258,147,369,519,684,0,519,51,687,951,897,654,456,654,327,654},
        {987,654,987,951,678,984,987,987,456,785,789,799,45,0,878,549,987,158,786,458,505,4758,798},
        {545,878,5454,545,8787,54654,56654,600,564,654,687,3554,987,64654,0,897,54,987,654,987,654,987,654},
        {654,654,987,65654,4984,984,984,654,98,546,987,654,987,654,987,0,987,654,987,809,9865,654,654},
        {2858,984,894,654,987,546,878,651,987,20,984,468,687,686,984,700,0,987,654,654,945,654,654},
        {654,98654,65654,6877,984,766,988,987,684,687,984,687,984,687,500,684,984,0,687,684,687,9,654},
        {546,987,200,987,27,654,1321,984,687,687,687,687,687,654,654,687,987,654,0,987,354,687,354},
        {654,321,987,654,345,987,909,258,147,369,51,684,519,951,687,951,897,654,456,0,654,327,654} ,
        {987,654,987,951,678,20,984,987,987,456,785,789,799,456,878,549,987,158,786,458,0,4758,798},
        {654,654,987,65,4984,984,984,654,987,546,987,654,987,654,987,987,654,987,80,9865,654,0,54},
        {58,984,894,654,987,546,987,651,987,984,468,687,686,984,700,654,770,654,654,945,654,654,0}
    };
    hamCycleStart(graph, V);
    return 0;
}
